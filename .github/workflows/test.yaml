name: Python Tests

on:
  pull_request:

jobs:
  build-docs:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']
        include:
        - os: ubuntu-latest
          python-version: '3.10'
          deploy: true   # Only deploy from this configuration
    outputs:
      deploy: ${{ steps.set-deploy-output.outputs.deploy }}
    steps:
    - uses: actions/checkout@v4
      with: # no need for the history
        fetch-depth: 0
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install ffmpeg (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get update && sudo apt-get install -y ffmpeg
    - name: Install ffmpeg (macOS)
      if: startsWith(matrix.os, 'macos')
      run: brew install ffmpeg
    - name: Install ffmpeg (Windows)
      if: startsWith(matrix.os, 'windows')
      run: choco install ffmpeg
    - name: Install pipx and ensure it's up to date
      run: |
        python -m pip install --upgrade pipx
        pipx ensurepath
      shell: bash
    - name: Install poetry
      run: pipx install poetry==1.7.1
      shell: bash
    - name: Install dependencies with Poetry
      run: |
        poetry run pip install iso-639
        poetry install --with dev,docs
      shell: bash
    - name: Build docs
      run: |
        APP_MODULE_NAME=$(ls -1 src | sort | head -1)
        poetry run pdoc src/"$APP_MODULE_NAME" -o docs -t docs_style/pdoc-theme --docformat google
        touch docs/.nojekyll
      shell: bash
    - name: Determine if deployment is needed
      id: set-deploy-output
      run: echo "::set-output name=deploy::true"
      shell: bash
    - uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs
